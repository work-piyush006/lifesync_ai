name: LifeSync AI Alarm Build CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      # 3Ô∏è‚É£ Cache Flutter dependencies
      - name: Cache Flutter Pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .packages
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }}

      # 4Ô∏è‚É£ Ensure Android folder exists
      - name: Ensure Android folder
        run: |
          if [ ! -d "android/app" ] || [ -z "$(ls -A android)" ]; then
            echo "‚ö° Android folder missing/empty. Creating fresh project structure..."
            flutter create .
          else
            echo "‚úÖ Android folder exists."
          fi

      # 5Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # 6Ô∏è‚É£ Check if launcher icon exists
      - name: Check launcher icon
        run: |
          if [ ! -f "assets/logo.png" ]; then
            echo "‚ùå assets/logo.png not found!"
            exit 1
          else
            echo "‚úÖ Launcher icon found"
          fi

      # 7Ô∏è‚É£ Generate Launcher Icons
      - name: Generate Launcher Icons
        run: flutter pub run flutter_launcher_icons

      # 8Ô∏è‚É£ Force Gradle version
      - name: Force Gradle version
        run: |
          sed -i 's|distributionUrl=.*|distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip|' android/gradle/wrapper/gradle-wrapper.properties
          echo "‚úÖ Forced Gradle 8.6"

      # 9Ô∏è‚É£ Generate local.properties for CI (Flutter + Android SDK paths)
      - name: Generate local.properties
        run: |
          echo "flutter.sdk=/opt/hostedtoolcache/flutter/stable-3.24.3-x64" > android/local.properties
          echo "sdk.dir=/usr/lib/android-sdk" >> android/local.properties
          echo "‚úÖ Created local.properties"

      # üîü Apply Flutter Gradle plugin (must be done in settings.gradle)
      - name: Ensure Flutter plugin applied
        run: |
          if ! grep -q "apply from:.*flutter.gradle" android/settings.gradle; then
            echo "Applying Flutter Gradle plugin to settings.gradle"
            echo -e "\napply from: \"\$flutterRoot/packages/flutter_tools/gradle/flutter.gradle\"" >> android/settings.gradle
          fi

      # 1Ô∏è‚É£1Ô∏è‚É£ Set SDK versions before plugin evaluation
      - name: Set SDK versions
        run: |
          sed -i 's/compileSdkVersion .*/compileSdkVersion 35/' android/app/build.gradle
          sed -i 's/targetSdkVersion .*/targetSdkVersion 35/' android/app/build.gradle
          sed -i 's/minSdkVersion .*/minSdkVersion 21/' android/app/build.gradle
          echo "‚úÖ SDK versions set"

      # 1Ô∏è‚É£2Ô∏è‚É£ Flutter doctor for debug info
      - name: Flutter Doctor
        run: flutter doctor -v

      # 1Ô∏è‚É£3Ô∏è‚É£ Clean build artifacts
      - name: Clean Flutter project
        run: flutter clean

      # 1Ô∏è‚É£4Ô∏è‚É£ Get dependencies again
      - name: Get Flutter dependencies
        run: flutter pub get

      # 1Ô∏è‚É£5Ô∏è‚É£ Build Release APK
      - name: Build Release APK
        run: flutter build apk --release --no-shrink

      # 1Ô∏è‚É£6Ô∏è‚É£ Upload Release APK
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
